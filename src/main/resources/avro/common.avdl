@namespace("org.ga4gh.models")
/**
This protocol defines common types used in the other GA4GH protocols. It does
not have any methods; it is merely a library of types.

Many of these types are related to defining sequence graphs. A sequence graph is
a set of linear, possibly empty sequences, where each end of each sequence can
join onto a side of a base in another sequence. The sequence being joined onto
is a "parent" of the other sequence, which is a "child", and the graph is
constrained such that parent-child relationships are acyclic.

A sequence graph here is represented by a set of `Segment`s, each covering
the entirety of a sequence and describing where its ends are joined.

A `Path` through a sequence graph is an array of `Segment`s covering subregions
of sequences, connected by joins from the graph.
*/
protocol Common {

/**
Each base in a sequence graph has two sides, `PLUS` and `MINUS`.

`PLUS` represents forwards, or the direction of increasing coordinates, while
`MINUS` represents reverse-complement, or the direction of decreasing
coordinates.
>>>>>>> Refactoring the way sequence graphs are represented.
*/
enum Side {
  PLUS,
  MINUS
}

/**
An abstraction for referring to a genomic position on a sequence.

For now, represents a genomic position as a sequence ID, a base offset on that
sequence (0-based), and a flag to say if it's the forward or reverse strand that
we're talking about.
*/
record Position {
  /**
  The ID of the sequence on which the `Position` is located.
  */
  string id;

  /**
  The 0-based offset from the start of the sequence string.
  */
  long offset;

  /**
  A flag to indicate if we are on the forward strand/downstream face (`PLUS`) or
  reverse strand/upstream face (`MINUS`).
  */
  Side side;
}

/**
A `Segment` represents a piece of sequence, which is optionally joined onto
other `Segment`s of sequence at each end, forming a graph. The bases for a
`Segment` are available through the `ListSegmentBases` API call.
*/
record Segment {
  /**
  The sequence ID and start index of this `Segment`. This base is always
  included in the segment, regardless of strand.
  */
  Position start;

  /**
  The length of this `Segment`'s sequence, walking away from `start` in the
  direction of `start.side`.
  */
  long length;

  /**
  Start and end `Position`s where this `Segment` attaches to other sequences.
  Note that the segmentId for start and end might not be the same. The
  `Segment`s covering the sequences onto which this `Segment` is joined are
  called its "parents".
  
  `startJoin` is the join on the base at `start`, and may only be set if `start`
  is at one end of the underlying sequence, pointing inwards. Similarly,
  `endJoin` is the join at on the base at the opposite end of the `Segment`, and
  may only be set if that base is similarly at one end of the underlying
  sequence, being read in the appropriate direction.
  */
  union { null, Position } startJoin, endJoin;
}

/**
A `Path` is an ordered list of `Segment`s. In general any contiguous path
through a sequence graph, with no novel adjacencies, can be represented by a
`Path`.
*/
record Path {
  /**
  We require that each adjacent pair of `Segment`s in a `Path` be related by a
  join of one onto the end of the other that is present in the underlying
  sequence graph. We also require that the whole array describes a single linear
  path.
  */
  array<Segment> segments = [];
}

/**
An enum for the different types of CIGAR alignment operations that exist.
Used wherever CIGAR alignments are used. The different enumerated values
have the following usage:

* `ALIGNMENT_MATCH`: An alignment match indicates that a sequence can be
  aligned to the reference without evidence of an INDEL. Unlike the
  `SEQUENCE_MATCH` and `SEQUENCE_MISMATCH` operators, the `ALIGNMENT_MATCH`
  operator does not indicate whether the reference and read sequences are an
  exact match. This operator is equivalent to SAM's `M`.
* `INSERT`: The insert operator indicates that the read contains evidence of
  bases being inserted into the reference. This operator is equivalent to
  SAM's `I`.
* `DELETE`: The delete operator indicates that the read contains evidence of
  bases being deleted from the reference. This operator is equivalent to
  SAM's `D`.
* `SKIP`: The skip operator indicates that this read skips a long segment of
  the reference, but the bases have not been deleted. This operator is
  commonly used when working with RNA-seq data, where reads may skip long
  segments of the reference between exons. This operator is equivalent to
  SAM's 'N'.
* `CLIP_SOFT`: The soft clip operator indicates that bases at the start/end
  of a read have not been considered during alignment. This may occur if the
  majority of a read maps, except for low quality bases at the start/end of
  a read. This operator is equivalent to SAM's 'S'. Bases that are soft clipped
  will still be stored in the read.
* `CLIP_HARD`: The hard clip operator indicates that bases at the start/end of
  a read have been omitted from this alignment. This may occur if this linear
  alignment is part of a chimeric alignment, or if the read has been trimmed
  (e.g., during error correction, or to trim poly-A tails for RNA-seq). This
  operator is equivalent to SAM's 'H'.
* `PAD`: The pad operator indicates that there is padding in an alignment.
  This operator is equivalent to SAM's 'P'.
* `SEQUENCE_MATCH`: This operator indicates that this portion of the aligned
  sequence exactly matches the reference (e.g., all bases are equal to the
  reference bases). This operator is equivalent to SAM's '='.
* `SEQUENCE_MISMATCH`: This operator indicates that this portion of the
  aligned sequence is an alignment match to the reference, but a sequence
  mismatch (e.g., the bases are not equal to the reference). This can
  indicate a SNP or a read error. This operator is equivalent to SAM's 'X'.
*/
enum CigarOperation {
  ALIGNMENT_MATCH,
  INSERT,
  DELETE,
  SKIP,
  CLIP_SOFT,
  CLIP_HARD,
  PAD,
  SEQUENCE_MATCH,
  SEQUENCE_MISMATCH
}

/**
A structure for an instance of a CIGAR operation.
*/
record CigarUnit {
  /** The operation type. */
  CigarOperation operation;

  /** The number of bases that the operation runs for. */
  long operationLength;

  /**
  `referenceSequence` is only used at mismatches (`SEQUENCE_MISMATCH`)
  and deletions (`DELETE`). Filling this field replaces the MD tag.
  If the relevant information is not available, leave this field as `null`.
  */
  union { null, string } referenceSequence = null;
}

}
