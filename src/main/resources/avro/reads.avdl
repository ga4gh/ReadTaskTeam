@namespace("org.ga4gh")
protocol GAReads {

record GAReferenceSequence {
  union { null, string } assemblyId = null;
  union { null, long } length = null;
  union { null, string } md5checksum = null;
  union { null, string } name = null;
  union { null, int } ncbi_taxon_id = null;  // ID from http://www.ncbi.nlm.nih.gov/taxonomy (e.g. 9606->human)
  union { null, string } uri = null;

  // The accession number of the official sequence from which this reference
  // sequence is derived. A sequence X is said to be *derived* from sequence Y,
  // if X and Y are of the same length and the per-base sequence divergence at
  // A/C/G/T bases is sufficiently small. Two sequences derived from the same
  // official sequence share the same coordinates and annotations, and can be
  // replaced with the official sequence for certain use cases.
  union { null, string } sourceAccession = null;
}

record GAProgram {
  union { null, string } commandLine = null;
  union { null, string } id = null;
  union { null, string } name = null;
  union { null, string } prevProgramId = null;
  union { null, string } version = null;
}

record GAKeyValue { 
    string key;
    string value = null;
}

record GADataSet {
    string id;
    union { null, string } description = null;
}

record GAReadGroup {

  // The readgroup ID.
  string id;

  // The ID of the dataset this readgroup belongs to.
  union {null, string} datasetId = null;

  // The readgroup name.
  union {null, string} name = null;

  // The readgroup description.
  union {null, string} description = null;
  
  // The sample this readgroup's data was generated from.
  union { null, string } sample;
  
  union { null, string } library = null;
  union { null, string } platformUnit = null;
  union { null, int } predictedInsertSize = null;
  union { null, string } sequencingCenter;
  union { null, string } sequencingTechnology;

  // The date this readgroup was created.
  union {null, long} created = null;

  // The number of reads in this readgroup.
  union {null, long} readCount = null;
  
  // The programs used to generate this readgroup.
  array<GAProgram> programs = [];

  // The reference sequences the reads in this readgroup are aligned to.
  array<GAReferenceSequence> referenceSequences = [];
  
  // Additional information
  array<GAKeyValue> tags = [];
}

record GAKeyValue { 
    string key;
    string value = null;
}

enum GACigarOperation {
    ALIGNMENT_MATCH,   // M
    INSERT,            // I
    DELETE,            // D
    SKIP,              // N
    CLIP_SOFT,         // S
    CLIP_HARD,         // H
    PAD,               // P
    SEQUENCE_MATCH,    // =
    SEQUENCE_MISMATCH  // X
}

record GACigarUnit {
    GACigarOperation operation;
    long operationLength;

    // contigSequence is only used at mismatches (X) and deletions (D). Filling
    // this field replaces the MD tag. If the relevant information is not
    // available, leave this field as "null".
    union { null, string } contigSequence = null;
}

record GALinearAlignment { // a linear alignment can be represented by one CIGAR string
    string contigName;
    long position; // 0-based position
    boolean reverseStrand; // the alignment is on the reverse strand of the reference sequence.
	union { null, boolean } secondary = false; // SAM flag 0x100
    union { null, int } mappingQuality = null;
    array<GACigarUnit> cigar = []; 
    array<GAKeyValue> tags = [];
}

record GARead {
    // This read failed quality control (SAM flag 0x200)
    union { boolean, null } failedVendorQualityChecks = false;

    // The alignment of this read. If unmapped, the array is empty. If the
    // alignment is linear (vast majority of alignments), the array is of size
    // one. If the alignment is composed of multiple simple linear alignments
    // (i.e. chimeric), the components can be found in the SA tag for mappers
    // supporting the feature.
    array<GALinearAlignment> alignment = [];

	// Specify whether all the linear alignments of the read are present in
	// alignment[]. Set to null (i.e. absent) if unknown.
	union { null, boolean } complete = null;

    // The list of bases that this read represents (e.g. 'CATCGA'). (SEQ)
    union { null, string } baseSequence = null;

    // Represents the quality of each base in this read. Each character represents
    // one base. To get the quality, take the ASCII value of the character and
    // subtract 33. (QUAL)
    union { null, string } baseQuality = null;

    array<GAKeyValue> tags = [];
}

record GAFragment {
    // The ID of the ReadGroup this fragment belongs to. (Every fragment must belong to exactly one ReadGroup.)
    string readGroupId;

	// unique in a ReadGroup
	union { null, string } fragmentId = null;

	// The fragment is suppposed to be free of strucutral variations. For
	// paired-end reads, this flag is reduced to the "properly paired" SAM flag
	// (bit 0x2). It is typically set by the mapper to inform downstream tools.
	union { boolean, null } properPlacement = false;

	// This fragment is a PCR or optical duplicate (SAM flag 0x400)
    union { boolean, null } duplicateFragment = false;

	// Reads sequenced from this fragment. The array order is the sequencing order.
	array<GARead> reads;

	// Specify whether all the reads in the fragment are present in reads[].
	// Set to null (i.e. absent) if unknown. Similar to GARead::complete.
	union { null, boolean } complete = null;

    // Length of the original piece of dna that produced both this read and the
    // paired read. (TLEN)
    union { null, int } templateLength = null; 
}

}
