@namespace("org.ga4gh")
protocol GAReads {

/*
 * This file defines the objects used to represent a hierarchy of reads and alignments:
 *    GAReadGroupSet >--< GAReadGroup --< fragment --< read --< alignment --< linear alignment
 *
 * A GAReadGroupSet is a logical collection of GAReadGroup's.
 * A GAReadGroup is all the data that’s processed the same way by the sequencer.
 *    There are typically 1-10 GAReadGroup's in a GAReadGroupSet.
 * A *fragment* is a single stretch of a DNA molecule.
 *    There are typically millions of fragments in a GAReadGroup.
 *    A fragment has a name (QNAME in BAM spec), a length (TLEN in BAM spec), and an array of reads.
 * A *read* is a contiguous sequence of bases.
 *    There are typically only one or two reads in a fragment. If there are two reads, they’re known as a mate pair.
 *    A read has an array of base values, an array of base qualities, and alignment information.
 * An *alignment* is the way alignment software maps a read to a reference.
 *    There’s one primary alignment, and can be one or more secondary alignments.
 *    Secondary alignments represent alternate possible mappings -- they are rarely reported by aligners.
 * A *linear alignment* maps a string of bases to a reference using a single CIGAR string.
 *    There’s one representative alignment, and can be one or more supplementary alignments.
 *    Supplementary alignments represent chimeric reads -- they are rare.
 *
 * A GAReadAlignment object is a flattened representation of the bottom layers of this hierarchy.
 *    There's exactly one such object per *linear alignment*.
 *    The object contains alignment info, plus fragment and read info for easy access.
 */

import idl "common.avdl";

record GAReferenceSequence {
  union { null, string } assemblyId = null;
  union { null, long } length = null;
  union { null, string } md5checksum = null;
  union { null, string } name = null;
  union { null, int } ncbiTaxonId = null;  // ID from http://www.ncbi.nlm.nih.gov/taxonomy (e.g. 9606->human)
  union { null, string } uri = null;

  // The accession number of the official sequence from which this reference
  // sequence is derived. A sequence X is said to be *derived* from sequence Y,
  // if X and Y are of the same length and the per-base sequence divergence at
  // A/C/G/T bases is sufficiently small. Two sequences derived from the same
  // official sequence share the same coordinates and annotations, and can be
  // replaced with the official sequence for certain use cases.
  union { null, string } sourceAccession = null;
}

record GAProgram {
  union { null, string } commandLine = null;
  union { null, string } id = null;
  union { null, string } name = null;
  union { null, string } prevProgramId = null;
  union { null, string } version = null;
}

record GADataset {
    string id;
    union { null, string } description = null;
}

record GAReadGroup {

  /** The read group ID. */
  string id;

  /** The ID of the dataset this read group belongs to. */
  union { null, string } datasetId = null;

  /** The read group name. */
  union { null, string } name = null;

  /** The read group description. */
  union { null, string } description = null;

  /** The sample this read group's data was generated from. */
  union { null, string } sample;

  union { null, string } library = null;
  union { null, string } platformUnit = null;
  union { null, int } predictedInsertSize = null;
  union { null, string } sequencingCenter;
  union { null, string } sequencingTechnology;

  /** The date this read group was created. */
  union { null, long } created = null;

  /** The number of reads in this read group. */
  union { null, long } readCount = null;

  /** The programs used to generate this read group. */
  array<GAProgram> programs = [];

  /** The reference sequences the reads in this read group are aligned to. */
  array<GAReferenceSequence> referenceSequences = [];

  /** Additional information */
  array<GAKeyValue> tags = [];
}

record GAReadGroupSet {
  /** The read group set ID. */
  string id;

  /** The ID of the dataset this read group set belongs to. */
  union { null, string } datasetId = null;

  /** The read group set name. */
  union { null, string } name = null;

  /** The read groups in this set. */
  array<GAReadGroup> readGroups = [];
}

enum GACigarOperation {
    ALIGNMENT_MATCH,   // M
    INSERT,            // I
    DELETE,            // D
    SKIP,              // N
    CLIP_SOFT,         // S
    CLIP_HARD,         // H
    PAD,               // P
    SEQUENCE_MATCH,    // =
    SEQUENCE_MISMATCH  // X
}

record GACigarUnit {
    GACigarOperation operation;
    long operationLength;

    /** contigSequence is only used at mismatches (X) and deletions (D). Filling
     this field replaces the MD tag. If the relevant information is not
     available, leave this field as "null".
    */
    union { null, string } contigSequence = null;
}

record GAMappingPosition {
    string contig;
    long position;
    boolean reverseStrand;
}

/** a linear alignment can be represented by one CIGAR string */
record GALinearAlignment {
    GAMappingPosition position;
    union { null, int } mappingQuality = null;
    array<GACigarUnit> cigar = [];
}

/** Each read alignment describes a linear alignment with additional information
 about the fragment and the read. A read alignment object is equivalent to a
 line in a SAM file. */
record GAReadAlignment {
  
    /** The ID of the read group this read belongs to. (Every read must belong to exactly one read group.) */
    string readGroupId;

    // fragment attributes

    /** The fragment name. Equivalent to QNAME (query template name) in SAM.*/
    string fragmentName;

    /** The orientation and the distance between reads from the fragment are
     consistent with the sequencing protocol (extension to SAM flag 0x2) */
    union { null, boolean } properPlacement = false;

    /** The fragment is a PCR or optical duplicate (SAM flag 0x400) */
    union { null, boolean } duplicateFragment = false;

    /** The number of reads in the fragment (extension to SAM flag 0x1) */
    union { null, int } numberReads = null;

    /** The observed length of the fragment, equivalent to TLEN in SAM. */
    union { null, int } fragmentLength = null;

    // read attributes

    /** The read number in sequencing. 0-based and less than numberReads. This field
     replaces SAM flag 0x40 and 0x80. */
    union { null, int } readNumber = null;

    /** Whether this read is low quality. In SAM this is flag 0x200 - failed vendor quality checks. */
    union { null, boolean } lowQualityRead = false;

    // this linear alignment

    /** null if unmapped */
    union { null, GALinearAlignment } alignment = null;

    /** Whether this alignment is secondary. Equivalent to SAM flag 0x100.
     By convention, each read has one and only one alignment where both
     secondaryAlignment and supplementaryAlignment are false. In that case, 
     the full read sequence and quality should be present. */
    union { null, boolean } secondaryAlignment = false;
    
    /** Whether this alignment is supplementary. Equivalent to SAM flag 0x800.
     By convention, each read has one and only one alignment where both
     secondaryAlignment and supplementaryAlignment are false. In that case, 
     the full read sequence and quality should be present. */    
    union { null, boolean } supplementaryAlignment = false;

    /** The portion of the read sequence and quality in the alignment. In a
     supplementary or seconday alignment, alignedSequence and alignedQuality
     may be shorter than the read sequence and quality, or even absent. */
    union { null, string } alignedSequence = null;
    array<int> alignedQuality = [];

    /** The mapping of the primary alignment of the (readNumber+1)%numberReads
     read in the fragment. It replaces mate position and mate strand in SAM. */
    union { null, GAMappingPosition } nextMatePosition = null;

    array<GAKeyValue> tags = [];
}

}
