@namespace("org.ga4gh")
protocol Reads {

/*
 * This file defines the objects used to represent a hierarchy of reads and alignments:
 *    ReadGroupSet >--< ReadGroup --< fragment --< read --< alignment --< linear alignment
 *
 * A ReadGroupSet is a logical collection of ReadGroup's.
 * A ReadGroup is all the data that’s processed the same way by the sequencer.
 *    There are typically 1-10 ReadGroup's in a ReadGroupSet.
 * A *fragment* is a single stretch of a DNA molecule.
 *    There are typically millions of fragments in a ReadGroup.
 *    A fragment has a name (QNAME in BAM spec), a length (TLEN in BAM spec), and an array of reads.
 * A *read* is a contiguous sequence of bases.
 *    There are typically only one or two reads in a fragment. If there are two reads, they’re known as a mate pair.
 *    A read has an array of base values, an array of base qualities, and alignment information.
 * An *alignment* is the way alignment software maps a read to a reference.
 *    There’s one primary alignment, and can be one or more secondary alignments.
 *    Secondary alignments represent alternate possible mappings -- they are rarely reported by aligners.
 * A *linear alignment* maps a string of bases to a reference using a single CIR string.
 *    There’s one representative alignment, and can be one or more supplementary alignments.
 *    Supplementary alignments represent chimeric reads -- they are rare.
 *
 * A ReadAlignment object is a flattened representation of the bottom layers of this hierarchy.
 *    There's exactly one such object per *linear alignment*.
 *    The object contains alignment info, plus fragment and read info for easy access.
 */

import idl "common.avdl";

record ReferenceSequence {
  /** Unique within the repository. */
  string id;

  /** We require the ReferenceSequence record to be able to give you its sequence. */
  string sequence;

  long length;

  /** MD5 of the upper-case sequence excluding all whitespace characters (as SQ:M5 in SAM). */
  string md5checksum;

  /** Description can include a standard name for this sequence, but name in alignments is in `ReferenceSequenceSet`. */
  union { null, string } description = null;
  
  /**
    The uri from which the sequence was obtained, if not given in the containing `ReferenceSequenceSet`. 
    Specifies a FASTA format file/string with one name, sequence pair.
  */
  union { null, string } sourceURI = null;

  /** 
    The accession from which the sequence was obtained, if not given in the containing `ReferenceSequenceSet`.
    In INSDC (GenBank/ENA/DDBJ) with version number as GCF_000001405.26
  */
  union { null, string } sourceAccession = null;
  
  /** 
    A sequence X is said to be *derived* from source sequence Y, if X and Y are of the same length 
    and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences 
    derived from the same official sequence share the same coordinates and annotations, and 
    can be replaced with the official sequence for certain use cases.
  */
  union { null, float } sourceDivergence = null; // fraction of bases that are different when aligned without indels

  /** 
    ID from http://www.ncbi.nlm.nih.gov/taxonomy (e.g. 9606->human)
    If not present, use the `ncbiTaxonId` from the containing ReferenceSequenceSet(s)
  */
  union { null, int } ncbiTaxonId = null;
}

record ReferenceSequenceSet {
  /** Unique in the repository. */
  string id;

  // Keep names and lengths of sequences here, as in a BAM header.  Actual sequences can be retrieved from ids.
  // This means we can process read alignments without fetching an entire genome's worth of sequences.  
 
  /** The names of the sequences, as used in MappingPosition. */
  array<string> names = [];
 
  /** the corresponding lengths of the sequences. */
  array<long> lengths = [];
 
  /** the corresponding ids for the sequences themselves. */
  array<string> sequenceIds = [];
 
  /** MD5 of the concatenation of { name, literal sequence } in array order, all strings 0-terminated. */
  string md5checksum;

  /**
    ID from http://www.ncbi.nlm.nih.gov/taxonomy (e.g. 9606->human) 
    `ncbiTaxonId` can be overridden for specific contained ReferenceSequence records,
    e.g. for EBV in a human reference genome
  */
  union { null, int } ncbiTaxonId = null;

  /** Optional free text description. */  
  union { null, string } description = null; 
 
  // next information about the source of the sequences

  /** Public id such as GRCh37. */
  union { null, string } assemblyId = null;

  /**
    Specifies a FASTA format file/string.
    Can be overriden by the `sourceURI` field in a specific `ReferenceSequence`.
  */
  union { null, string } sourceURI = null;

  /**
   In INSDC (GenBank/ENA/DDBJ), ideally with version number.
   Can be overriden by the `sourceAccession` field in a specific `ReferenceSequence`.
  */
  union { null, string } sourceAccession = null;
  
  /** 
    A `ReferenceSequenceSet` may be derived from a source if it contains additional sequences, or some
    of the sequences within it are derived (see the definition of *derived* in `ReferenceSequence`).
  */
  boolean isDerived = false;
}

record Program {
  union { null, string } commandLine = null;
  union { null, string } id = null;
  union { null, string } name = null;
  union { null, string } prevProgramId = null;
  union { null, string } version = null;
}

record Dataset {
    string id;
    union { null, string } description = null;
}

record ReadGroup {

  /** The read group ID. */
  string id;

  /** The ID of the dataset this read group belongs to. */
  union { null, string } datasetId = null;

  /** The read group name. */
  union { null, string } name = null;

  /** The read group description. */
  union { null, string } description = null;

  /** The sample this read group's data was generated from. */
  union { null, string } sample;

  union { null, string } library = null;
  union { null, string } platformUnit = null;
  union { null, int } predictedInsertSize = null;
  union { null, string } sequencingCenter;
  union { null, string } sequencingTechnology;

  /** The date this read group was created. */
  union { null, long } created = null;

  /** The number of reads in this read group. */
  union { null, long } readCount = null;

  /** The programs used to generate this read group. */
  array<Program> programs = [];

  /**
    The reference sequence set the reads in this readgroup are aligned to. 
    Required if there are any read alignments.
  */
  union {null, string } referenceSequenceSetId = null;

  /** Additional information */
  array<KeyValue> tags = [];
}

record ReadGroupSet {
  /** The read group set ID. */
  string id;

  /** The ID of the dataset this read group set belongs to. */
  union { null, string } datasetId = null;

  /** The read group set name. */
  union { null, string } name = null;

  /** The read groups in this set. */
  array<ReadGroup> readGroups = [];
  
  // NB: we require that all readgroups in the set are mapped to the same referenceSequenceSet.
}

/** a linear alignment can be represented by one CIR string */
record LinearAlignment {
    Position position;
    union { null, int } mappingQuality = null;
    array<CigarUnit> cigar = [];
}

/** Each read alignment describes a linear alignment with additional information
 about the fragment and the read. A read alignment object is equivalent to a
 line in a SAM file. */
record ReadAlignment {
  
    /** The ID of the read group this read belongs to. (Every read must belong to exactly one read group.) */
    string readGroupId;

    // fragment attributes

    /** The fragment name. Equivalent to QNAME (query template name) in SAM.*/
    string fragmentName;

    /** The orientation and the distance between reads from the fragment are
     consistent with the sequencing protocol (extension to SAM flag 0x2) */
    union { null, boolean } properPlacement = false;

    /** The fragment is a PCR or optical duplicate (SAM flag 0x400) */
    union { null, boolean } duplicateFragment = false;

    /** The number of reads in the fragment (extension to SAM flag 0x1) */
    union { null, int } numberReads = null;

    /** The observed length of the fragment, equivalent to TLEN in SAM. */
    union { null, int } fragmentLength = null;

    // read attributes

    /** The read number in sequencing. 0-based and less than numberReads. This field
     replaces SAM flag 0x40 and 0x80. */
    union { null, int } readNumber = null;

    /** SAM flag 0x200 */
    union { null, boolean } failedVendorQualityChecks = false;

    // this linear alignment

    /** null if unmapped */
    union { null, LinearAlignment } alignment = null;

    /** Whether this alignment is secondary. Equivalent to SAM flag 0x100.
     By convention, each read has one and only one alignment where both
     secondaryAlignment and supplementaryAlignment are false. In that case, 
     the full read sequence and quality should be present. */
    union { null, boolean } secondaryAlignment = false;
    
    /** Whether this alignment is supplementary. Equivalent to SAM flag 0x800.
     By convention, each read has one and only one alignment where both
     secondaryAlignment and supplementaryAlignment are false. In that case, 
     the full read sequence and quality should be present. */    
    union { null, boolean } supplementaryAlignment = false;

    /** The portion of the read sequence and quality in the alignment. In a
     supplementary or seconday alignment, alignedSequence and alignedQuality
     may be shorter than the read sequence and quality, or even absent. */
    union { null, string } alignedSequence = null;
    array<int> alignedQuality = [];

    /** The mapping of the primary alignment of the (readNumber+1)%numberReads
     read in the fragment. It replaces mate position and mate strand in SAM. */
    union { null, Position } nextMatePosition = null;

    /** Additional information */
    array<KeyValue> tags = [];
}

}
