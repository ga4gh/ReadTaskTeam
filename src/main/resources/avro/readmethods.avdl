@namespace("org.ga4gh")
protocol ReadMethods {

import idl "reads.avdl";

/******************  /reads/search  *********************/
/** This request maps to the body of POST /reads/search. */
record SearchReadsRequest {
  /** If specified, restrict this query to reads within the given readgroups. */
  union { null, array<string> } readGroupIds = null;

  /** 
    The referenceSequence to query.  Either give a `referenceSequenceId` or 
    a `referenceSequenceSetId` and `referenceSequenceName`.
    Leaving this blank returns results from all reference sequences, including
    unmapped reads - this could be very large.
  */
  union { null, string } referenceSequenceSetId = null;

  /** 
    The referenceSequence to query.  Either give a `referenceSequenceId` or 
    a `referenceSequenceSetId` and `referenceSequenceName`.
    Leaving this blank returns results from all reference sequences, including
    unmapped reads - this could be very large.
  */
  union { null, string } referenceSequenceName = null;

  /** 
    The referenceSequence to query.  Either give a `referenceSequenceId` or 
    a `referenceSequenceSetId` and `referenceSequenceName`.
    Leaving this blank returns results from all reference sequences, including
    unmapped reads - this could be very large.
  */
  union { null, string } referenceSequenceId = null;

  /** The start position (0-based) of this query.
      If a referenceSequence is specified, this defaults to 0.
   */
  union { null, long } startPosition = null;

  /** The end position (0-based, exclusive) of this query.
      If a referenceSequence is specified, this defaults to the referenceSequence's length.
   */
  union { null, long } endPosition = null;

  /** The continuation token, which is used to page through large result sets.
      To get the next page of results, set this parameter to the value of
      `nextPageToken` from the previous response.
   */
  union { null, string } pageToken = null;
}

/** This is the response from POST /reads/search. */
record SearchReadsResponse {
  /** The list of matching alignment records, sorted by position.
      Unmapped reads, which have no position, are returned last.
   */
  array<ReadAlignment> alignments = [];

  /** The continuation token, which is used to page through large result sets.
      Provide this value in a subsequent request to return the next page of results.
      This field will be empty if there aren't any additional results.
   */
  union { null, string } nextPageToken = null;
}

/**
  Gets a list of `ReadAlignments` matching the search criteria.
  
  POST /reads/search takes a `SearchReadsRequest` as its body and 
  returns a `SearchReadsResponse`. 
*/
SearchReadsResponse searchReads(SearchReadsRequest request) throws GAException;

/******************  /readgroupsets/search  *********************/
/** This request maps to the body of POST /readgroupsets/search. */
record SearchReadGroupSetsRequest {
  /** The list of datasets to search. */
  array<string> datasetIds = [];

  /** Only return read group sets for which a substring of the name matches this string. */
  union { null, string } name = null;

  /** The continuation token, which is used to page through large result sets.
      To get the next page of results, set this parameter to the value of
      `nextPageToken` from the previous response.
   */
  union { null, string } pageToken = null;
}

/** This is the response from POST /readgroupsets/search */
record SearchReadGroupSetsResponse {
  /** The list of matching read group sets. */
  array<ReadGroupSet> readGroupSets = [];

  /** The continuation token, which is used to page through large result sets.
      Provide this value in a subsequent request to return the next page of results.
      This field will be empty if there aren't any additional results.
   */
  union { null, string } nextPageToken = null;
}

/** 
  Gets a list of `ReadGroupSets` matching the search criteria.
  
  POST /readgroupsets/search takes a `SearchReadGroupSetsRequest` as its 
  body and returns a `SearchReadGroupSetsResponse`. 
*/
SearchReadGroupSetsResponse searchReadGroupSets(SearchReadGroupSetsRequest request) throws GAException;

/****************  /referenceSequenceSets/search  *******************/
/** This request maps to the body of POST /referenceSequenceSets/search. */
record SearchReferenceSequenceSetsRequest {
  /** If present return the record for this id.  This is the normal use of this method. */
  union { null, string } id = null;
  
  /** If present return the record for which the md5sum matches (see record definition for md5sum construction details). */
  union { null, string } md5sum = null;

  /**
    If present return records for which the accession matches this string.
    Best to give a version number e.g. GCF_000001405.26.  
    If only the main accession number is given then return all records with that main accession, whichever version.
    NB different versions will have different sequences.
  */
  union { null, string } accession = null;

  /** If present return records for which the assemblyId contains this string. */
  union { null, string } assemblyId = null;

  /** 
    The continuation token, which is used to page through large result sets.
    To get the next page of results, set this parameter to the value of
    `nextPageToken` from the previous response.
   */
  union { null, string } pageToken = null;
}

/** This is the response from POST /referenceSequenceSets/search. */
record SearchReferenceSequenceSetsResponse {
  /** The list of matching referenceSequenceSets. */
  array<ReferenceSequenceSet> referenceSequenceSets = [];

  /**
    The continuation token, which is used to page through large result sets.
    Provide this value in a subsequent request to return the next page of results.
    This field will be empty if there aren't any additional results.
   */
  union { null, string } nextPageToken = null;
}

/**
  Gets a list of `ReadReferenceSequenceSets` matching the search criteria.
  
  POST /referenceSequenceSets/search takes a `SearchReferenceSequenceSetsRequest` as its body and 
  returns a `SearchReferenceSequenceSetsResponse`. 
*/
SearchReferenceSequenceSetsResponse searchReferenceSequenceSets(SearchReferenceSequenceSetsRequest request) throws GAException;

/****************  /referenceSequences/search  *******************/
/** This request maps to the body of POST /referenceSequences/search. */
record SearchReferenceSequencesRequest {
  /** If present return the records for these ids.  This is the normal use of this method. */
  union { null, array<string> } ids = null;

  /** If present return records for which the md5sum of the upper case sequence matches one of these strings. */
  union { null, array<string> } md5sums = null;

  /**
    If present return records for which the accession matches one of these strings.
    Best to give a version number e.g. GCF_000001405.26.  
    If only the main accession number is given then return all records with that main accession, whichever version.
    NB different versions will have different sequences.
  */
  union { null, array<string> } accessions = null;

  /** 
    The continuation token, which is used to page through large result sets.
    To get the next page of results, set this parameter to the value of
    `nextPageToken` from the previous response.
   */
  union { null, string } pageToken = null;
}

/** This is the response from POST /referenceSequences/search. */
record SearchReferenceSequencesResponse {
  /** The list of matching referenceSequences. */
  array<ReferenceSequence> referenceSequences = [];

  /**
    The continuation token, which is used to page through large result sets.
    Provide this value in a subsequent request to return the next page of results.
    This field will be empty if there aren't any additional results.
   */
  union { null, string } nextPageToken = null;
}

/**
  Gets a list of `ReadReferenceSequences` matching the search criteria.
  
  POST /referenceSequences/search takes a `SearchReferenceSequencesRequest` as its body and 
  returns a `SearchReferenceSequencesResponse`. 
*/
SearchReferenceSequencesResponse searchReferenceSequences(SearchReferenceSequencesRequest request) throws GAException;
}
