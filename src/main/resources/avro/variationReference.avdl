@namespace("org.ga4gh")
protocol GAVariationReference {

import idl "common.avdl" ;

/* A sequence graph is made progressively joining new sequence pieces,
   which we call variants, into an existing graph.  This starts with a  
   primary sequence.  For example consider the primary sequence in
   GRCh38 for a chromosome.  Then variants can be joined into it,
   starting on a defined side of a defined base in the existing
   structure, containing new sequence (potentially empty if a pure
   deletion or breakpoint) and then joining back to another defined
   side of another base in the current graph.

   An arbitrarily complex reference graph is built this way, but we
   can also use the same construction to specify individual variants
   from the reference.

   Any base in the graph will have a unique identity defined by its
   variant id and 0-based position in the variant sequence.  It is
   oriented in the direction of the variant sequence.

   We support a context model for uniquely identifying bases in the
   graph.  Currently this is the UCSC two flank proposal as proposed 
   by Paten, Haussler et al.

   We assume that GADNAsequence is defined in common.avdl as an
   array<GADNAbase>, and that GADNAbase is the avro equivalent of
   typedef char.
*/

enum GAVariantSide {
  PLUS, 	   // forwards, direction of increasing coordinates
  MINUS 	   // reverse-complement, direction of decreasing coordinates
}

/* This rule for mapping a base in a new string to a reference base
   is that matching either the left context or the right context of
   any reference base is sufficient, so long as globally all such
   matches point to the same reference base.
*/
record GAVariantContext {
  GADNAbase base ;
  GADNAsequence leftFlank ; // sequence immediately preceding base
  GADNAsequence rightFlank ; // reverse-complement of sequence immediately following base
}

record GAVariantJoinLocation {
  string variantId ;	// id of the variant in which this location is based
  int position ;	// 0-based
  GAVariantSide side ;
}

record GAVariant {
  string id ;

  // start and end locations of how this variant fits into the existing graph
  // start and end are {0,0,FORWARD} for a primary sequence
  // note that the variantId for start and end may not be the same
  GAVariantJoinLocation startJoin, endJoin ;  

  GADNAsequence sequence ; // the sequence to insert between startJoin and endJoin
  // we require to be able to access sequence, but could allow it to be generated
  // from a global identifier such as a versioned INSDC accession stored in info.

  // the context that identfies each base in this sequence
  // This is optional - it is only required to support variants that are part of a 
  // reference to which new sequences (e.g. reads) are being mapped using contexts.
  array<GAVariantContext> contexts ; // same length as sequence, or empty if missing

  // We may need to say other things about the variant, e.g. origin, dbSNP...
  array<GAKeyValue> info ;
}

/**********************************************************************/

/* Next we show how to provide information about samples.  The core
   idea is to provide Calls which each contain information about an
   Allele in a CallSet.  Loosely the alleles correspond to rows in a
   VCF and the callsets to a column, but there are some key differences.

   First, we provide information separately about alleles not sites
   (unary variant model).  We can determine from the graph whether two
   alleles are incompatible in the same haplotype and hence "allelic"
   in the standard usage of the term.  Note that this is a pairwise
   relation, not transitive, so we don't support sites as sets of
   alleles in the way that VCF does.  This avoids the problems when
   merging sites in VCF.  Our merge semantics are simple: only merge
   identical alleles.  Identity can be checked by name when sharing a
   global name and definition space, or recursively by how the alleles 
   are constructed from global objects when scope is local.

   Second, we represent phase information by separate haplotype
   callSets, rather than using some sort of | or / or | notation or
   equivalent in the calls of a genotype callSet.  So genotype
   callSets just contain allele counts (copy number) or dosages.  This
   is the only way to provide phase data. Because we support sparse
   callSets, which we hope can be lightweight, each piece of partial
   phasing (as for example supported by phase sets in VCF) will be a
   separate haplotype CallSet on the same sample.

   Third, note that the call values in a callset are not explicitly
   ordered and oriented.  This reflects typically the data we have
   about them.  In many cases we can infer order and orientation from
   the reference graph on which the alleles are defined, for example
   for a sequence of simple variants (SNPs, indels etc) along a
   reference.  But in the general case with multiple copies of alleles
   and rearrangements this is not the case.  For when we do want to
   explicitly state the order and orientation of alleles we define a
   VariantScaffold record.
*/

/* A Segment is a basic piece of sequence from the graph out of which
   more complex things can be made.
*/
record GASegment {
  string variantId ;
  int start, end ;   	// start is 0-based and inclusive, end if exclusive
  // So start <= x < end if end > start, or end < x <= start if end < start.
  GAVariantSide side ; int length ;	// alternative to end
  // I suggest that if start == 0 and end == 0 then this is the whole Variant
  // and otherwise we require end != start (and equivalently that length > 0)
}

/* An Allele is a contigous piece of sequence that we will want to
   say is present (in general at some copy number) or absent in a
   sample.  Very often it will just be a variant, but it can also be a
   segment of the reference, or of another variant, or in the general
   case a contigous series of segments running across variant boundaries.
*/
record GAAllele {
  string id ;	// if this Allele is a clean variant, then reuse variantId

  array<GASegment> sequence ; 	// require that segments abut in order
}

record GACallSet {
  string id ;

  string sampleId ;  // can use the name here in absence of better sample structure
  enum { GENOTYPE, HAPLOTYPE} type = GENOTYPE ; // must be one or the other

  // We may need to say other things about the callset, e.g. derivation
  array<GAKeyValue> info ;
}

record GACall {
  string callSetId ;
  string alleleID ;

  // not all of the following will be present, but at least one should be
  int copyNumber ;	     // 0 for not present, 
  float dosage ;
  array<float> probability ; // probability copy number is k: 0..n
  array<float> likelihood ;  // likelihood of data given copy number k
  int readCount ;	     // number of reads supporting this allele (DP in VCF)
  array<GAKeyValue> evidence ; // potential other evidence for the call
}

record GAVariantScaffold {
  string id ;

  array<GAAllele> alleles ;
  array<boolean> isForwards ; 	// orientation of each allele
}

/* Finally, note that while typically an Allele is short, this
   structure also allows us to define a long allele as a literal
   sequence path through the graph incorporating (parts of) multiple
   variants.

   For example, it supports defining alleles to represent ALT haplotypes
   from GRCh38 or an LRG (clinical locus-specific reference sequence) 
   that differs from the canonical reference.

   Other people may want to define variants on these "Allele"
   sequences.  It would be possible to write code to map those onto
   the reference graph.  This could support mapping variants between
   coordinate systems.  There has been interesting discussion about
   this in the context of dbSNP and representation of variation on 
   multiple references.
*/

} // end of protocol
