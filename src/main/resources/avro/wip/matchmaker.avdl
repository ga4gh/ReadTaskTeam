@namespace("org.ga4gh.match")

protocol GAMatchmaker {

/**
An enum representing how often a match search should be performed.

* `ONCE`: only search once in the current database
* `PERIODIC`: repeat the search monthly until cancelled, reporting new and
  updated matches
*/
enum GAQueryType {
  ONCE,
  PERIODIC
}

/**
An enum representing gender. Use null for unknown.
TODO: Ask the metadata team to fix this representation
See PR #138 for more information.
*/
enum GAGender {
  MALE, FEMALE
}

/**
An enum representing mode of inheritance.

* `AD`: Autosomal dominant
* `AR`: Autosomal recessive
* `XD`: X-linked dominant
* `XR`: X-linked recessive
* `YL`: Y-linked
* `MI`: Mitochondrial
* `IC`: Isolated cases
* `UN`: Uncertain
*/
enum GAInheritanceMode {
  AD, AR, XD, XR, YL, MI, IC, UN
}

/**
The response type.

* `INLINE`: responses are sent in the same response (the default value if
  the results property exists)
* `ASYNCHRONOUS`: responses will be sent by the remote server at a later time,
  in a separate request to the origin server (the default value if the results
  property is missing)
* `EMAIL`: responses will be sent by email directly to the contact email, in
  a human readable format
*/
enum GAResponseType {
  INLINE, ASYNCHRONOUS, EMAIL
}

/**
Contact information.
*/
record GASubmitter {
  /**
  Required. The email address where matches can be sent; the values must
  conform to the RFC 2822 address specification mailbox format (no group)
  */
  string email;

  /** The first and last name. */
  union { null, string } name = null;

  /** Human-readable institution name. */
  union { null, string } institution = null;
}

/** A feature */
record GAFeature {
  /** Required. An ICHPT term identifier. */
  string id;

  /** Whether the feature was observed. Use `null` for unknown. */
  union { null, boolean } observed = null;

  /**
  An age interval
  [as defined by the HPO](http://www.human-phenotype-ontology.org/hpoweb/showterm?id=HP:0011007)
  when the majority of the symptoms manifested.
  Optional; systems which do not support this type of information per symptom
  should ignore it.
  */
  union { null, string } ageOfOnset = null;
}

/* A gene */
record GAGene {
  /**
  Required. A <gene symbol> from the HGNC database OR <ensembl gene ID> OR
  <entrez gene ID>
  */
  string gene;

  /**
  The chromosome this gene is on. 
  TODO: Update this representation with assistance from issue #112
  */
  union { null, string } chr = null;

  /** The start position of this gene. (0-based) */
  union { null, long } start = null;

  /** The end position of this gene. (0-based, exclusive) */
  union { null, long } end = null;

  /**
  The reference bases. (e.g. `-`, `A`, `ACG`, …, where `-` is used to indicate
  an insertion)
  */
  union { null, string } ref = null;

  /**
  The alternate bases. (e.g. `-`, `A`, `ACG`, …, where `-` is used to indicate
  a deletion)
  */
  union { null, string } alt = null;

  /** 1 for heterozygous or hemizygous, 2 for homozygous; */
  union { null, int } zygosity = null;

  /**
  The type of mutation, as supported by Jannovar (see the
  [Jannovar Tutorial](http://compbio.charite.de/contao/index.php/jannovar.html?file=tl_files/Jannovar/JannovarTutorial.pdf),
  page 6, Table 1):
  */
  union { null, string } type = null;

  /**
  Required. The Genome Reference Consortium identifier of the reference
  assembly, such as GRCh38.
  */
  string assembly;
}

/** A match. */
record GAMatch {
  /**
  A name/identifier assigned by the user which can be used to reference the
  patient in a recognizable manner (in an email for example); it should not
  contain any personally identifiable information.
  */
  union { null, string } label = null;

  /**
  Consists of contact information of the person that submitted the search.
  Required if an email response is expected, optional otherwise.
  */
  union { null, GASubmitter } submitter = null;

  /** The biological gender at birth */
  union { null, GAGender } gender = null;

  /**
  An age interval
  [as defined by the HPO](http://www.human-phenotype-ontology.org/hpoweb/showterm?id=HP:0011007)
  when the majority of the symptoms manifested.
  */
  union { null, string } ageOfOnset = null;

  /**
  The mode of inheritance of the disease, if known.
  */
  union { null, GAInheritanceMode } modeOfInheritance = null;

  /**
  Is a list of OMIM (MIM:######) or OrphaNet (ORPHA#####) identifiers,
  can be empty.
  */
  array<string> disorders = [];

  /**
  A list of features. At least one of `features` or `genes` is required.
  (having both is preferred)
  */
  array<GAFeature> features = [];

  /**
  A list of possible causes. At least one of `features` or `genes` is
  required. (having both is preferred)
  */
  array<GAGene> genes = [];
}

/** The match request. */
record GAMatchRequest {
  /**
  Required. The internal identifier (obfuscated or not) that can be used by
  the originating system to reference the patient data.
  */
  string id;

  /**
  How often a match search should be performed.
  */
  GAQueryType queryType = "ONCE";

  /* Required. The match to search against. */
  GAMatch match;
}

/** The match response. */
record GAMatchResponse {
  /**
  Required. Helps match the results to the original query for asynchronous
  results, and allows to manage the search submission. This does not have to
  be the same as the id sent in the request since it represents how the
  remote host stores queries.
  */
  string queryId;

  /** The type of this response. */
  GAResponseType responseType = "INLINE";

  /**
  A list of matches. Absent for asynchronous results.
  Required for inline results, but can be empty.
  */
  array<GAMatch> results = [];
}

/**
Creates a match request.

`POST /match` must accept a JSON version of `GAMatchRequest`
as the post body and will return a JSON version of `GAMatchResponse`.
*/
GAMatchResponse createMatchRequest(
    /** This request maps to the body of `POST /match` as JSON. */
    GAMatchRequest request);


/**
Updates a match request with the specified ID.

`PUT /match/{queryId}` must accept a JSON version of `GAMatchRequest`
as the post body and will return a JSON version of `GAMatchResponse`.
*/
GAMatchResponse updateMatchRequest(
    /**
    The query ID of the match request to update.
    This parameter comes from the URL path.
    */
    string queryId,

    /** This request maps to the body of `PUT /match/{queryId}` as JSON. */
    GAMatchRequest request);


/**
Deletes a match request with the specified ID.

`DELETE /match/{queryId}` will use the ID provided in the URL path.
*/
void deleteMatchRequest(
    /**
    The query ID of the match request to delete.
    This parameter comes from the URL path.
    */
    string queryId);

}
